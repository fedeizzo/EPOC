openapi: "3.0.0"
info:
  version: "2.0"
  title: "EPOC"
  description: EPOC gives you simple apis to get a well-built eating plan, and much much more.
  license:
    name: MIT
    url: https://github.com/apiaryio/polls-api/blob/master/LICENSE
servers:
  - url: http://localhost:3001/api/v2
    description: Localhost
  - url: https://epoc-planner.herokuapp.com/api/v2
    description: Heroku server

paths:
  /signup:
    x-summary: Signup to the service
    post:
      description: Signup to the service
      summary: Signup
      requestBody:
        $ref: "#/components/requestBodies/SignupRequest"
      responses:
        "200":
          description: "Correctly signed up"
          $ref: "#/components/responses/200OkUserService"
        "400":
          $ref: "#/components/responses/400BadRequestService"
        "403":
          description: "Invalid password: too common"
          $ref: "#/components/responses/403ForbiddenService"
        "409":
          description: "Username already used"
          $ref: "#/components/responses/409ConflictService"
        "500":
          $ref: "#/components/responses/500InternalServerError"
  
  /login:
    x-summary: Login to the service
    post:
      description: Login to the service providing your credentials.
      summary: Login
      requestBody:
        $ref: "#/components/requestBodies/LoginRequest"
      responses:
        "200":
          description: "Correctly logged in"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: JWT=dijubnewuycfgwec6wec76w598uighc
        "400":
          $ref: "#/components/responses/400BadRequestService"
        "401":
          $ref: "#/components/responses/401UnauthorizedErrorCredentialsService"
        "404":
          $ref: "#/components/responses/404NotFoundService"
        "500":
          $ref: "#/components/responses/500InternalServerError"
          
  /logout:
    x-summary: Logout from the service
    get:
      security:
        - jwtAuth: []
      description: Logout from the service
      summary: Logout
      responses:
        "200":
          description: "Correctly logged out"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: JWT=
        "401":
          $ref: "#/components/responses/401UnauthorizedErrorJWT"
        "500":
          $ref: "#/components/responses/500InternalServerError"
  
  /user:
    x-summary: Delete user account from the service
    delete:
      security:
        - jwtAuth: []
      description: Delete user account from the service
      summary: Delete user account
      requestBody:
        $ref: "#/components/requestBodies/LoginRequest"
      responses:
        "200":
          description: "Correctly deleted user account"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: JWT=
        "401":
          $ref: "#/components/responses/401UnauthorizedErrorJWT"
        "404":
          $ref: "#/components/responses/404NotFoundService"
        "500":
          $ref: "#/components/responses/500InternalServerError"
          
  /search/recipe:
    x-summary: Search targeted only to recipes
    get:
      description: >-
        Search a recipe using a string as parameter
      summary: Simple recipe search, returns basic recipe infos of the recipes that match the searchString.
      parameters:
        - $ref: "#/components/parameters/searchString"
      responses:
        "200":
          $ref: "#/components/responses/200OkRecipeServiceShortList"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500InternalServerError"
        
        # No 404 response: an empty list should do

  /search/plan:
    x-summary: Search targeted only to plans
    get:
      description: >-
        Search plans using a string as parameter
      summary: Simple plan research, returns basic plan infos of the recipes that match the searchString.
      parameters:
        - $ref: "#/components/parameters/searchString"
      responses:
        "200":
          $ref: "#/components/responses/200OkPlansList"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500InternalServerError"

  /recipe/{recipeId}:
    get:
      description: >-
        Search a recipe using its id as parameter.
      summary: Get a recipe by its id.
      parameters:
        - in: path
          name: recipeId
          required: true
          schema:
            type: string
          description: The id of the recipe
      responses:
        "200":
          $ref: "#/components/responses/200OkRecipeServiceCompleteRecipe"
        "404":
          $ref: "#/components/responses/404NotFoundResource"
        "500":
          $ref: "#/components/responses/500InternalServerError"

  /preference:
    get:
      description: "Returns a json with the list of preferences of the user.
        It is possible to specify the types of preference you want to retrieve"
      summary: Retrieves user positive preferences
      security:
        - jwtAuth: []
      responses:
        "200":
          description: "User preferences"
          content:
            application/json:
              schema:
                properties:
                  text:
                    type: string
                    example: 'Preferences found'
                  content:
                    $ref: "#/components/schemas/Preference"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401UnauthorizedErrorJWT"
        "500":
          $ref: "#/components/responses/500InternalServerError"

  /preference/positive:
    x-summary: Endpoint to manage the user preferences
    post:
      security:
        - jwtAuth: []
      summary: Creates new positive preference
      description: Creates new positive preference by adding the value specified in the body to the ones associated with the user
      requestBody:
        $ref: "#/components/requestBodies/PreferencePositivePost"
      responses:
        "200":
          description: "Correctly added preference"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401UnauthorizedErrorJWT"
        "409":
          description: "Conflict: the preference you tried to add was inside negative preferences"
          content:
            text/plain:
              schema:
                type: string
              example: "Preference ingredient basilico is in negative preferences,
              so we can not add it here"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    delete:
      security:
        - jwtAuth: []
      description: 'Deletes the given (positive) preference from the user profile'
      summary: Delete a positive preference
      requestBody:
        $ref: "#/components/requestBodies/PreferencePositivePost"
      responses:
        "200":
          description: "Correctly removed preference"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401UnauthorizedErrorJWT"
        "404":
          description: "Preference x was not found in the user's profile"
        "500":
          $ref: "#/components/responses/500InternalServerError"

  /preference/negative:
    x-summary: Endpoint to manage the user negative preferences
    post:
      security:
        - jwtAuth: []
      summary: Creates new negative preference
      description: Creates new negative preference by adding the value specified in the body to the ones associated with the user
      requestBody:
        $ref: "#/components/requestBodies/PreferenceNegativePost"
      responses:
        "200":
          description: "Correctly added preference"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401UnauthorizedErrorJWT"
        "409":
          description: "Conflict: the preference you tried to add was inside positive preferences"
          content:
            text/plain:
              schema:
                type: string
              example: "Preference ingredient arancia is in positive preferences,
              so we can not add it here"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    delete:
      security:
        - jwtAuth: []
      summary: Delete a negative preference
      description: 'Deletes the given (negative) preference from the user profile'
      requestBody:
        $ref: "#/components/requestBodies/PreferenceNegativePost"
      responses:
        "200":
          description: "Correctly removed preference"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401UnauthorizedErrorJWT"
        "404":
          description: "Preference x was not found in the user's profile"
        "500":
          $ref: "#/components/responses/500InternalServerError"

  /plan:
    get:
      description: Retrieves a plan given its id
      summary: Retrieving plan
      parameters:
      - in: query
        name: planId
        required: true
        schema:
          type: string
        description: The id of the plan
      responses:
        "200":
          $ref: "#/components/responses/200OkPlanGet"
        "404":
          $ref: "#/components/responses/404NotFoundResource"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    post:
      description: Generates an eating palan for the user basing on the parameters the user specified in the request
      summary: Plan generation
      requestBody:
        $ref: "#/components/requestBodies/PlanRequest"
      responses:
        "200":
          $ref: "#/components/responses/200OkPlanGenerate"        
        "409":
          $ref: "#/components/responses/409ConflictService"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    
  /favorites:
    x-summary: Manage favorites
    get:
      description: Gets all the favorite plans of a user given the JWT
      security:
        - jwtAuth: []
      summary: Get all favorite plans
      responses:
        "200":
          $ref: "#/components/responses/200OkFavoritePlansList"        
        "400":
          $ref: "#/components/responses/400BadRequestService"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    post:
      description: Add plan to favorites given its id and user trough JWT
      security:
        - jwtAuth: []
      summary: Add plan to favorites
      requestBody:
        $ref: "#/components/requestBodies/FavoritesAddRequest"
      responses:
        "200":
          $ref: "#/components/responses/200OkPlanAddedToFavorites"        
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    delete:
      description: Remove plan from favorites given its id and user trough JWT
      security:
        - jwtAuth: []
      summary: Remove plan from favorites
      requestBody:
        $ref: "#/components/requestBodies/FavoritesRemoveRequest"
      responses:
        "200":
          $ref: "#/components/responses/200OkPlanRemovedFromFavorites"        
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500InternalServerError"

  /favorites/isFavorite:
    x-summary: Check if plan is favorites
    get:
      description: Check if plan favorites given its id and user trough JWT
      security:
        - jwtAuth: []
      summary: Check if plan is favorites
      requestBody:
        $ref: "#/components/requestBodies/FavoritesAddRequest"
      responses:
        "200":
          $ref: "#/components/responses/200OkPlanIsFavorites"        
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500InternalServerError"


components:
  # https://swagger.io/docs/specification/authentication/bearer-authentication/
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  parameters:
    searchString:
      name: searchString
      in: query
      description: The string to be searched
      schema:
        type: string
      required: true
      example:
        "Pasta"

  schemas:
    LoginBody:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
      example:
        username: mario
        password: rossi
        
    SignupBody:
      type: object
      properties:
        firstName:
          type: string
        secondName:
          type: string
        email:
          type: string
        username:
          type: string
        password:
          type: string
      required:
        - firstName
        - email
        - username
        - password
      example:
        firstName: mario
        secondName: rossi
        emaiL: mario.rossi@mrossi.com
        username: marioRossi
        password: mario123
        
    Ingredient:
      type: object
      description: Ingredient of some recipe, with quantity.
      properties:
        name:
          type: string
          description: Name of the ingredient
        unitOfMeasure:
          type: integer
        quantity:
          type: number
      required:
        - name
        - quantity
      example:
        name: Broccoli
        unitOfMeasure: Kilograms
        quantity: 100000

    NutritionalInfo:
      type: object
      description: nutritional info of a recipe
      properties:
        calories:
          type: number
        carbohydrate:
          type: number
        cholesterol:
          type: number
        fat:
          type: number
        fiber:
          type: number
        saturedFat:
          type: number
        sodium:
          type: number
        sugar:
          type: number
      example:
        calories: 74
        carbohydrate: 1.5
        cholesterol: 0.3
        fat: 2.5
        fiber: 2.1
        saturedFat: 0.2
        sodium: 1.3
        sugar: 1.2

    ShortRecipe:
      type: object
      properties:
        name:
          type: string
          description: Name of the recipe.
        image:
          type: string
          description: url to the image of the recipe
        description:
          type: string
          description: description of the recipe
        averageRating:
          type: number
          description: average rating of the recipe
      example:
        name: Carbonara
        image: "https://dpv87w1mllzh1.cloudfront.net/alitalia_discover/attachments/data/000/000/334/original/roma-how-to-carbonara-1920x1080.jpg?1519055920"
        description: "La pasta più buona di tutte"
        averageRating: 5

    CompleteRecipe:
      type: object
      properties:
        name:
          type: string
          description: Name of the recipe
        dateModified:
          type: string
          description: Date of last modification
        estimatedCost:
          type: integer
          description: estimated cost class
        image:
          type: string
          description: url to the image of the recipe
        categories:
          type: array
          items:
            type: string
          description: list of the cathegories of a recipe
        description:
          type: string
          description: description of the recipe
        prepTime:
          type: number
          description: time for preparation
        cookTime:
          type: number
          description: time for cooking
        totalTime:
          type: number
          description: total estimated time
        conservationTime:
          type: number
          description: estimated conservation time
        peopleFor:
          type: number
          description: number of portions
        ingredients:
          type: array
          items:
            $ref: "#/components/schemas/Ingredient"
          description: ingredients of the recipe
        keywords:
          type: array
          items:
            type: string
          description: keywords to identify the recipe
        lables:
          type: array
          items:
            type: string
          description: labels of the recipe
        averageRating:
          type: number
          description: average rating of the recipe
        numberOfRatings:
          type: number
          description: number of ratings for the recipe
        requiredTools:
          type: array
          items:
            type: string
          description: list of tools needed for this recipe
        nutritionalInfos:
          $ref: "#/components/schemas/NutritionalInfo"
      example:
        name: "Carbonara"
        dateModified: "20-09-2013-8:34:25"
        estimatedCost: "medium"
        image: "https://dpv87w1mllzh1.cloudfront.net/alitalia_discover/attachments/data/000/000/334/original/roma-how-to-carbonara-1920x1080.jpg?1519055920"
        categories:
          - "primi piatti"
          - "classici"
        description: "La pasta più buona di tutte"
        prepTime: 5
        cookTime: 20
        totalTime: 20
        conservationTime: 2
        peopleFor: 4
        ingredients:
          - name: "uova"
            quantity: 2
          - name: "spaghetti"
            quantity: 500
            unitOfMeasure: "grams"
          - name: "all the other"
            quantity: 100
        keywords:
          - "buona"
          - "carbonara"
          - "pancetta"
          - "uova"
        labels:
          - "primo piatto"
          - "tradizionale"
        averageRating: 5
        numberOfRatings: 1246
        requiredTools:
          - "pentole"
          - "fornello"
        nutritionalInfos:
          calories: 74
          carbohydrate: 1.5
          cholesterol: 0.3
          fat: 2.5
          fiber: 2.1
          saturedFat: 0.2
          sodium: 1.3
          sugar: 1.2
    
    Preference:
      properties:
        positive:
          $ref: "#/components/schemas/PositivePreference"
        negative:
          $ref: "#/components/schemas/NegativePreference"

    PositivePreference:
      properties:
        recipes:
          type: array
          items:
            type: string
        ingredients:
          type: array
          items:
            type: string
        priceRange:
          type: array
          items:
            type: string

    NegativePreference:
      properties:
        recipes:
          type: array
          items:
            type: string
        ingredients:
          type: array
          items:
            type: string
        priceRange:
          type: array
          items:
            type: string
        categories:
          type: array
          items:
            type: string
        plans:
          type: array
          items:
            type: string
        labels:
          type: array
          items:
            type: string

    PositivePreferencePostDelete:
      type: object
      properties:
        "type":
          type: string
          enum: [recipes, ingredients, priceRange]
        value:
          type: string

    NegativePreferencePostDelete:
      type: object
      properties:
        "type":
          type: string
          enum: [recipe,ingredient,categories,plans,labels]
        value:
          type: string

    Plan:
      type: object
      properties:
        name:
          type: string
          description: Name of the plan
        user:
          $ref: "#/components/schemas/User"
        numRecipes:
          type: number
          description: Number of recipes in the plan
        estimatedCost:
          type: string
          enum: ["none","veryLow","low","medium","high","veryHigh"]
          description: Estimated cost of the plan
        recipes:
          type: array
          items:
            type: string
          description: Ids of the recipes of this plan
      required:
        - name
        - numRecipes
        - estimatedCost
        - recipes
      example:
        name: "Il Piano Vegano"
        numRecipes: 1
        user:
          firstName: "Mario"
          secondName: "Rossi"
          email: "mario@nintendo.bros"
          username: "Itsamee"
          password: "princessPeach"
          estimatedCost: "low"
        recipes:
        - name: "Carbonara"
          dateModified: "20-09-2013-8:34:25"
          estimatedCost: "medium"
          image: "https://dpv87w1mllzh1.cloudfront.net/alitalia_discover/attachments/data/000/000/334/original/roma-how-to-carbonara-1920x1080.jpg?1519055920"
          categories:
            - "primi piatti"
            - "classici"
          description: "La pasta più buona di tutte"
          prepTime: 5
          cookTime: 20
          totalTime: 20
          conservationTime: 2
          peopleFor: 4
          ingredients:
            - name: "uova"
              quantity: 2
            - name: "spaghetti"
              quantity: 500
              unitOfMeasure: "grams"
            - name: "all the other"
              quantity: 100
          keywords:
            - "buona"
            - "carbonara"
            - "pancetta"
            - "uova"
          labels:
            - "primo piatto"
            - "tradizionale"
          averageRating: 5
          numberOfRatings: 1246
          requiredTools:
            - "pentole"
            - "userInfo"
          nutritionalInfos:
            calories: 74
            carbohydrate: 1.5
            cholesterol: 0.3
            fat: 2.5
            fiber: 2.1
            saturedFat: 0.2
            sodium: 1.3
            sugar: 1.2

    ShortPlan:
      type: object
      description: Short version of the plan object
      properties:
        info:
          type: object
          properties:
            name:
              type: string
              description: name of the plan
            user:
              $ref: "#/components/schemas/CompleteRecipe"
              description: user
            numRecipes:
              type: number
              description: numer of recipes in the plan
            estimatedCost:
              type: string
              enum: ["none","veryLow","low","medium","high","veryHigh"]
              description: number of recipes in the paln
            recipes:
              type: array
              items:
                $ref: "#/components/schemas/CompleteRecipe"
              description: recipes of the plan
          description: Information about the plan
        id:
          type: string
          description: id of the plan

    User:
      type: object
      description: User of the system
      properties:
        firstName:
          type: string
          description: Name of the user
        secondName:
          type: string
          description: The second name of the user
        email:
          type: string
          description: The email of the user
        username:
          type: string
          description: The username of the user
        password:
          type: string
          description: The password of the user
      required:
        - firstName
        - email
        - username
        - password
      example:
        firstName: "Mario"
        secondName: "Rossi"
        email: "mario@nintendo.bros"
        username: "Itsamee"
        password: "princessPeach"

    PlanRequestSchema:
      type: object
      properties:
        name:
          type: string
          description: Name of the plan
        numberOfMeals:
          type: number
          description: Number of meals in the plan
        budget:
          type: string 
          enum: ["none","veryLow","low","medium","high","veryHigh"]
          description: Budget of the plan
        usingPreferences:
          type: boolean
          description: Specifies if the generation of the plan has preferences set
        preferences:
          $ref: "#/components/schemas/PreferencesGeneratePlan"
          description: Preferences for the request
      required:
        - numberOfMeals
        - usingPreferences
      example:
        name: "Piano per la prossima settimana"
        budget: "none"
        numberOfMeals: 5
        usingPreferences: false

    FavoritesRequestSchema:
      type: object
      properties:
        planId:
          type: string
          description: Id of the plan
      required:
        - planId
      example:
        planId: "5fc5e42599b31d58f4d73ade"

    PreferencesGeneratePlan:
      type: object
      properties:
        positive:
          $ref: "#/components/schemas/PositivePrefsGeneratePlan"
          description: Positive preferences for the creation of a plan
        negative:
          $ref: "#/components/schemas/NegativePrefsGeneratePlan"
          description: Negative preferences for the creation of a plan
      example:
        positive:
          recipes: ["Carbonara", "Matriciana"]
          labels: ["Carne"]
          ingredients: ["Rosmarin", "Burro"]
          priceRange: "none"
        negative:
          recipes: ["Minestrone", "Zuppa di zucca"]
          labels: ["Vegetariano"]
          ingredients: ["Aglio", "Carciofo"]
      
    PositivePrefsGeneratePlan:
      type: object
      properties:
        recipes:
          type: array
          items: 
            type: string
          description: Preferred recipes
        labels:
          type: array
          items: 
            type: string
          description: Preferred labels
        ingredients:
          type: array
          items: 
            type: string
          description: Preferred ingredients
        priceRange:
          type: string
          enum: ["none","veryLow","low","medium","high","veryHigh"]
          description: Preferred price range
      example:
        recipes: ["Carbonara", "Matriciana"]
        labels: ["Carne"]
        ingredients: ["Rosmarin", "Burro"]
        priceRange: "none"
    
    NegativePrefsGeneratePlan:
      type: object
      properties:
        recipes:
          type: array
          items: 
            type: string
          description: Recipes which the user does not like
        labels:
          type: array
          items: 
            type: string
          description: Labels which the user does not like
        ingredients:
          type: array
          items: 
            type: string
          description: Ingredients which the user does not like
      example:
        recipes: ["Minestrone", "Zuppa di zucca"]
        labels: ["Vegetariano"]
        ingredients: ["Aglio", "Carciofo"]
        
  requestBodies:
    LoginRequest:
      description: "Login Request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LoginBody"
          example:
            username: "Mario"
            password: "mariuccio123"
            
    SignupRequest:
      description: "Signup Request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SignupBody"
          example:
            firstname: "Mario"
            secondname: "Rossi"
            email: "mario.rossi@gmail.com"
            username: "Mario"
            password: "mariuccio123"
    
    PreferencePositivePost:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PositivePreferencePostDelete"
          example:
            "category": recipe
            "content": mousse al cioccolato con scorzette d'arancia
            
    PreferenceNegativePost:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NegativePreferencePostDelete"
          example:
            "category": ingredient
            "content": broccoli

    PlanRequest:
      description: "Plan Request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PlanRequestSchema"
          example:
            name: "Piano per la prossima settimana"
            budget: "none"
            numberOfMeals: 5
            usingPreferences: false

    FavoritesAddRequest:
      description: "Add plan to favorites"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FavoritesRequestSchema"
          example:
            planId: "5fc5e42599b31d58f4d73ade"
            
    FavoritesRemoveRequest:
      description: "Remove plan from favorites"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FavoritesRequestSchema"
          example:
            planId: "5fc5e42599b31d58f4d73ade"

  responses:    
    200OkUserService:
      description: Ok response from User Service 
      content:
        application/json:
          schema:
            type: object
            properties:
              text:
                type: string
                description: Short text with the response
              userInfo:
                type: object
                description: Information of the user
            required:
              - text
              - userInfo
            example:
              text: "All ok"

    200OkRecipeServiceShortList:
      description: Ok response from recipe service for searching recipes by string-matching
      content:
        application/json:
          schema:
            type: object
            properties:
              text:
                type: string
                description: Short text with the response
              recipes:
                type: array
                items:
                  $ref: "#/components/schemas/ShortRecipe"
            required:
              - text
              - recipes
    
    200OkRecipeServiceCompleteRecipe:
      description: Ok response from recipe service for searching a recipe by its id
      content:
        application/json:
          schema:
            type: object
            properties:
              text:
                type: string
                description: Short text with the response
              recipe:
                $ref: "#/components/schemas/CompleteRecipe"
            required:
              - text
              - recipe
    
    200OkPlansList:
      description: Everything went well, the search result is included in the response
      content:
        application/json:
          schema:
            type: object
            properties:
              text:
                type: string
                description: Short text with the response
              plan:
                type: array
                items:
                  $ref: "#/components/schemas/Plan"
            required:
              - text
              - plan

    200OkPlanGenerate:
      description: Ok response for plan generation
      content:
        application/json:
          schema:
            type: object
            properties:
              text: 
                type: string
                description: The response
              plan:
                $ref: "#/components/schemas/Plan"
            required:
              - text
              - plan

    200OkPlanGet:
      description: Ok response for plan/
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: name of the plan
              text:
                type: string
                description: quick message for the response
              recipes:
                type: array
                items: 
                  $ref: "#/components/schemas/CompleteRecipe"
                description: recipes for the plan
              author:
                type: string
                description: name of the author
            required:
              - text
              - name
              - recipes
              - author
     
    200OkPlanAddedToFavorites:
      description: Ok response for favorites adding operation for plan
      content:
        application/json:
          schema:
            type: object
            properties:
              text: 
                type: string
                description: The response
              userInfo:
                type: object
                description: Information of the user
            required:
              - text
              - userInfo
              
    200OkPlanRemovedFromFavorites:
      description: Ok response for favorites removing operation for plan
      content:
        application/json:
          schema:
            type: object
            properties:
              text: 
                type: string
                description: The response
              userInfo:
                type: object
                description: Information of the user
            required:
              - text
              - userInfo
              
    200OkPlanIsFavorites:
      description: Ok response for is favorites operation for plan
      content:
        application/json:
          schema:
            type: object
            properties:
              favorite:
                type: boolean
                description: boolean that indicates if plan is favorite
            required:
              - favorite

    200OkFavoritePlansList:
      description: Ok response for the get request for favorite plans
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ShortPlan"


    400BadRequest:
      description: BadRequest

    400BadRequestService:
      description: BadRequest
      content:
        application/json:
          schema:
            type: object
            properties:
              text:
                type: string
                description: Short text with the response
            required:
              - text
            example:
              text: "Service error: bad request"
      
    401UnauthorizedErrorJWT:
      description: Access token is missing or invalid
    
    401UnauthorizedErrorCredentialsService:
      description: Invalid access credentials
      content:
        application/json:
          schema:
            type: object
            properties:
              text:
                type: string
                description: Short text with the error
            required:
              - text
            example:
              text: "Service error: wrong credentials"

    403ForbiddenService:
      description: Forbidden request error
      content:
        application/json:
          schema:
            type: object
            properties:
              text: 
                type: string
                description: Error text

    404NotFoundResource:
      description: Resource not found

    404NotFoundService:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              text:
                type: string
                description: Short text with the error
            required:
              - text
            example:
              text: "Service error: resource not found"

    409ConflictService:
      description: Conflict error response
      content:
        application/json:
          schema:
            type: object
            properties:
              text:
                type: string
                description: Short text with the error
            required:
              - text
            example:
              text: "Service error: conflict found"

    500InternalServerError:
      description: Internal server error